/*
 * validateapi
 * The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cloudmersive.client.gac;

import com.cloudmersive.client.gac.model.HtmlSsrfDetectionResult;
import com.cloudmersive.client.gac.model.SqlInjectionCheckBatchRequest;
import com.cloudmersive.client.gac.model.SqlInjectionCheckBatchResponse;
import com.cloudmersive.client.gac.model.SqlInjectionDetectionResult;
import com.cloudmersive.client.gac.model.XssProtectionBatchRequest;
import com.cloudmersive.client.gac.model.XssProtectionBatchResponse;
import com.cloudmersive.client.gac.model.XssProtectionResult;
import com.cloudmersive.client.gac.model.XxeDetectionBatchRequest;
import com.cloudmersive.client.gac.model.XxeDetectionBatchResponse;
import com.cloudmersive.client.gac.model.XxeDetectionResult;
import org.junit.Test;
import org.junit.Ignore;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TextInputApi
 */
@Ignore
public class TextInputApiTest {

    private final TextInputApi api = new TextInputApi();

    
    /**
     * Protect html input from Server-side Request Forgery (SSRF) attacks
     *
     * Detects SSRF (Server-side request forgery) attacks and unsafe URL attacks from HTML text input, where attackers can attempt to access unsafe local or network paths in the server environment by injecting them into HTML.
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void textInputCheckHtmlSsrfTest() throws IOException {
        String value = null;
        HtmlSsrfDetectionResult response = api.textInputCheckHtmlSsrf(value);

        // TODO: test validations
    }
    
    /**
     * Check text input for SQL Injection (SQLI) attacks
     *
     * Detects SQL Injection (SQLI) attacks from text input.
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void textInputCheckSqlInjectionTest() throws IOException {
        String value = null;
        String detectionLevel = null;
        SqlInjectionDetectionResult response = api.textInputCheckSqlInjection(value, detectionLevel);

        // TODO: test validations
    }
    
    /**
     * Check and protect multiple text inputs for SQL Injection (SQLI) attacks in batch
     *
     * Detects SQL Injection (SQLI) attacks from multiple text inputs.  Output preverses order of input items.
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void textInputCheckSqlInjectionBatchTest() throws IOException {
        SqlInjectionCheckBatchRequest value = null;
        SqlInjectionCheckBatchResponse response = api.textInputCheckSqlInjectionBatch(value);

        // TODO: test validations
    }
    
    /**
     * Check text input for Cross-Site-Scripting (XSS) attacks
     *
     * Detects XSS (Cross-Site-Scripting) attacks from text input.
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void textInputCheckXssTest() throws IOException {
        String value = null;
        XssProtectionResult response = api.textInputCheckXss(value);

        // TODO: test validations
    }
    
    /**
     * Check and protect multiple text inputs for Cross-Site-Scripting (XSS) attacks in batch
     *
     * Detects XSS (Cross-Site-Scripting) attacks from multiple text inputs.  Output preverses order of input items.
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void textInputCheckXssBatchTest() throws IOException {
        XssProtectionBatchRequest value = null;
        XssProtectionBatchResponse response = api.textInputCheckXssBatch(value);

        // TODO: test validations
    }
    
    /**
     * Protect text input from XML External Entity (XXE) attacks
     *
     * Detects XXE (XML External Entity) attacks from text input.
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void textInputCheckXxeTest() throws IOException {
        String value = null;
        Boolean allowInternetUrls = null;
        String knownSafeUrls = null;
        String knownUnsafeUrls = null;
        XxeDetectionResult response = api.textInputCheckXxe(value, allowInternetUrls, knownSafeUrls, knownUnsafeUrls);

        // TODO: test validations
    }
    
    /**
     * Protect text input from XML External Entity (XXE) attacks
     *
     * Detects XXE (XML External Entity) attacks from text input.
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void textInputCheckXxeBatchTest() throws IOException {
        XxeDetectionBatchRequest request = null;
        XxeDetectionBatchResponse response = api.textInputCheckXxeBatch(request);

        // TODO: test validations
    }
    
    /**
     * Protect text input from Cross-Site-Scripting (XSS) attacks through normalization
     *
     * Detects and removes XSS (Cross-Site-Scripting) attacks from text input through normalization.  Returns the normalized result, as well as information on whether the original input contained an XSS risk.
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void textInputProtectXssTest() throws IOException {
        String value = null;
        XssProtectionResult response = api.textInputProtectXss(value);

        // TODO: test validations
    }
    
}
